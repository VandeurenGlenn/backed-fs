{"version":3,"file":"fs-es.js","sources":["../src/platform-path.js","../src/fs.js"],"sourcesContent":["'use strict';\r\nimport path from 'path';\r\nimport {platform} from 'os';\r\n\r\nconst onPlatform = platform();\r\nlet posix;\r\n\r\nif (onPlatform === 'win32') {\r\n  posix = 'win32';\r\n} else {\r\n  posix = 'posix';\r\n}\r\n\r\nconst parse = src => {\r\n  return path[posix].parse(src)\r\n}\r\n\r\nconst basename = src => {\r\n  return path[posix].basename(src);\r\n}\r\n\r\nconst dirname = src => {\r\n  return path[posix].dirname(src);\r\n}\r\n\r\nexport default {\r\n  parse: parse,\r\n  basename: basename,\r\n  dirname: dirname\r\n}\r\n","'use strict';\nconst {writeFile, mkdir} = require('fs');\nconst vinylRead = require('vinyl-read');\nconst path = require('path');\nconst logger = require('backed-logger');\nimport platformPath from './platform-path.js';\n\nclass Fs {\n  /**\n   * @param {object} sources [{src: [\"some/glob/exp\"], dest: \"some/dest\"}]\n   */\n  copySources(sources=[]) {\n    return new Promise((resolve, reject) => {\n      if (sources) {\n        try {\n          let promises = [];\n          for (let source of sources) {\n            promises.push(this.copy(source.src, source.dest));\n          }\n          Promise.all(promises).then(() => {\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  }\n\n  /**\n   * returns a destination using [vinyl](https://github.com/gulpjs/vinyl) info\n   */\n  destinationFromFile(file) {\n    let dest = platformPath.parse(file.path).dir;\n    dest = dest.replace(`${process.cwd()}\\\\`, '');\n    dest = dest.split(path.sep);\n    if (dest.length < 0) {\n      dest[0] = file.dest;\n    } else {\n      dest.push(file.dest);\n    }\n    dest.push(platformPath.basename(file.path));\n    dest = dest.toString().replace(/,/g, '/');\n    return dest;\n  }\n\n  /**\n   * @param {string} src \"some/src/path\"\n   * @param {string} dest \"some/dest/path\"\n   */\n  copy(src=null, dest=null) {\n    return new Promise(resolve => {\n      let promises = [];\n      vinylRead(src, {\n        cwd: process.cwd()\n      }).then(files => {\n        for (let file of files) {\n          file.dest = dest;\n          promises.push(this.write(file, this.destinationFromFile(file)));\n        }\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  /**\n   * @param {object} file {src: \"some/src/path\", dest: \"some/dest/path\"}\n   */\n  write(file, destination) {\n    return new Promise((resolve, reject) => {\n      if (file) {\n        writeFile(destination, file.contents, err => {\n          if (err) {\n            if (global.debug) {\n              logger.warn(\n                  `subdirectory(s)::not existing\n                  Backed will now try to create ${destination}`\n                );\n            }\n            const dest = platformPath.dirname(destination);\n            const paths = dest.split('/');\n            let prepath = '';\n            for (let path of paths) {\n              prepath += `${path}/`;\n              if (path.length > 2) {\n                mkdir(prepath, err => {\n                  if (err) {\n                    if (err.code !== 'EEXIST') {\n                      reject(err);\n                    }\n                  }\n                });\n              }\n            }\n            this.write(file, destination).then(() => {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\nexport default new Fs();\n"],"names":["onPlatform","platform","posix","parse","src","path","basename","dirname","writeFile","mkdir","require","vinylRead","logger","Fs","sources","Promise","resolve","reject","promises","source","push","copy","dest","all","then","error","file","platformPath","dir","replace","process","cwd","split","sep","length","toString","files","write","destinationFromFile","destination","contents","err","global","debug","warn","paths","prepath","code"],"mappings":"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"}