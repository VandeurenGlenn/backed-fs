{"version":3,"file":"fs-es.js","sources":["../src/platform-path.js","../src/fs.js"],"sourcesContent":["'use strict';\r\nimport path from 'path';\r\nimport {platform} from 'os';\r\n\r\nconst onPlatform = platform();\r\nlet posix;\r\n\r\nif (onPlatform === 'win32') {\r\n  posix = 'win32';\r\n} else {\r\n  posix = 'posix';\r\n}\r\n\r\nconst parse = src => {\r\n  return path[posix].parse(src)\r\n}\r\n\r\nconst basename = src => {\r\n  return path[posix].basename(src);\r\n}\r\n\r\nconst dirname = src => {\r\n  return path[posix].dirname(src);\r\n}\r\n\r\nconst relative = (from, against) => {\r\n  return path[posix].relative(from, against);\r\n}\r\n\r\nexport default {\r\n  parse: parse,\r\n  basename: basename,\r\n  dirname: dirname\r\n}\r\n","'use strict';\r\nconst {writeFile, mkdir} = require('fs');\r\nconst vinylRead = require('vinyl-read');\r\nconst path = require('path');\r\nconst logger = require('backed-logger');\r\nimport platformPath from './platform-path.js';\r\n\r\nclass Fs {\r\n  /**\r\n   * @param {object} sources [{src: [\"some/glob/exp\"], dest: \"some/dest\"}]\r\n   */\r\n  copySources(sources=[]) {\r\n    return new Promise((resolve, reject) => {\r\n      if (sources) {\r\n        try {\r\n          let promises = [];\r\n          for (let source of sources) {\r\n            promises.push(this.copy(source.src, source.dest));\r\n          }\r\n          Promise.all(promises).then(() => {\r\n            resolve();\r\n          });\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a destination using [vinyl](https://github.com/gulpjs/vinyl) info\r\n   */\r\n  destinationFromFile(file) {\r\n    let dest = platformPath.relative(process.cwd(), file.path);\r\n    dest = dest.split(path.sep);\r\n    if (dest.length > 0) {\r\n      dest[0] = file.dest;\r\n    }\r\n    dest = dest.toString().replace(/,/g, '/');\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * @param {string} src \"some/src/path\"\r\n   * @param {string} dest \"some/dest/path\"\r\n   */\r\n  copy(src=null, dest=null) {\r\n    return new Promise(resolve => {\r\n      let promises = [];\r\n      vinylRead(src, {\r\n        cwd: process.cwd()\r\n      }).then(files => {\r\n        for (let file of files) {\r\n          file.dest = dest;\r\n          promises.push(this.write(file, this.destinationFromFile(file)));\r\n        }\r\n        Promise.all(promises).then(() => {\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {object} file {src: \"some/src/path\", dest: \"some/dest/path\"}\r\n   */\r\n  write(file, destination) {\r\n    return new Promise((resolve, reject) => {\r\n      if (file) {\r\n        writeFile(destination, file.contents, err => {\r\n          if (err) {\r\n            if (global.debug) {\r\n              logger.warn(\r\n                  `subdirectory(s)::not existing\r\n                  Backed will now try to create ${destination}`\r\n                );\r\n            }\r\n            const dest = platformPath.dirname(destination);\r\n            const paths = dest.split('/');\r\n            let prepath = '';\r\n            for (let path of paths) {\r\n              prepath += `${path}/`;\r\n              if (path.length > 2) {\r\n                mkdir(prepath, err => {\r\n                  if (err) {\r\n                    if (err.code !== 'EEXIST') {\r\n                      reject(err);\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n            }\r\n            this.write(file, destination).then(() => {\r\n              resolve();\r\n            });\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n}\r\nexport default new Fs();\r\n"],"names":["onPlatform","platform","posix","parse","src","path","basename","dirname","writeFile","mkdir","require","vinylRead","logger","Fs","sources","Promise","resolve","reject","promises","source","push","copy","dest","all","then","error","file","platformPath","relative","process","cwd","split","sep","length","toString","replace","files","write","destinationFromFile","destination","contents","err","global","debug","warn","paths","prepath","code"],"mappings":"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"}