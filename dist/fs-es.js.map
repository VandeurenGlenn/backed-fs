{"version":3,"file":"fs-es.js","sources":["../src/fs.js"],"sourcesContent":["'use strict';\nconst {writeFile, mkdir} = require('fs');\nconst vinylRead = require('vinyl-read');\nconst path = require('path');\nconst logger = require('backed-logger');\n\nclass Fs {\n  /**\n   * @param {object} sources [{src: [\"some/glob/exp\"], dest: \"some/dest\"}]\n   */\n  copySources(sources=[]) {\n    return new Promise((resolve, reject) => {\n      if (sources) {\n        try {\n          let promises = [];\n          for (let source of sources) {\n            promises.push(this.copy(source.src, source.dest));\n          }\n          Promise.all(promises).then(() => {\n            logger.succes(`${global.config.name}::copy finished`);\n            resolve();\n          });\n        } catch (error) {\n          logger.error(error);\n          reject(error);\n        }\n      }\n    });\n  }\n\n  /**\n   * returns a destination using [vinyl](https://github.com/gulpjs/vinyl) info\n   */\n  destinationFromFile(file) {\n    let dest = path.win32.parse(file.path).dir;\n    dest = dest.replace(`${process.cwd()}\\\\`, '');\n    dest = dest.split(path.sep);\n    if (dest.length > 1) {\n      dest[0] = file.dest;\n    } else {\n      dest[0] = file.dest;\n    }\n    dest.push(path.win32.basename(file.path));\n    dest = dest.toString().replace(/,/g, '\\\\');\n    return dest;\n  }\n\n  /**\n   * @param {string} src \"some/src/path\"\n   * @param {string} dest \"some/dest/path\"\n   */\n  copy(src=null, dest=null) {\n    return new Promise(resolve => {\n      let promises = [];\n      vinylRead(src, {\n        cwd: process.cwd()\n      }).then(files => {\n        for (let file of files) {\n          file.dest = path.win32.normalize(dest);\n          const destination = this.destinationFromFile(file);\n          promises.push(this.write(file, file.destination));\n        }\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  /**\n   * @param {object} file {src: \"some/src/path\", dest: \"some/dest/path\"}\n   */\n  write(file, destination) {\n    return new Promise((resolve, reject) => {\n      if (file) {\n        writeFile(destination, file.contents, err => {\n          if (err) {\n            if (global.debug) {\n              logger.warn(\n                  `subdirectory(s)::not existing\n                  Backed will now try to create ${destination}`\n                );\n            }\n            const dest = path.win32.dirname(destination);\n            const paths = dest.split('\\\\');\n            let prepath = '';\n            for (let path of paths) {\n              prepath += `${path}\\\\`;\n              mkdir(process.cwd() + '\\\\' + prepath, err => {\n                if (err) {\n                  if (err.code !== 'EEXIST') {\n                    reject(err);\n                  }\n                }\n              });\n            }\n            this.write(file).then(() => {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\nexport default new Fs();\n"],"names":["writeFile","mkdir","require","vinylRead","path","logger","Fs","sources","Promise","resolve","reject","promises","source","push","copy","src","dest","all","then","succes","global","config","name","error","file","win32","parse","dir","replace","process","cwd","split","sep","length","basename","toString","files","normalize","destination","destinationFromFile","write","contents","err","debug","warn","dirname","paths","prepath","code"],"mappings":"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"}