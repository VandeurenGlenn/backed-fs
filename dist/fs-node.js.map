{"version":3,"file":"fs-node.js","sources":["../src/platform-path.js","../src/fs.js"],"sourcesContent":["'use strict';\r\nimport path from 'path';\r\nimport {platform} from 'os';\r\n\r\nconst onPlatform = platform();\r\nlet posix;\r\n\r\nif (onPlatform === 'win32') {\r\n  posix = 'win32';\r\n} else {\r\n  posix = 'posix';\r\n}\r\n\r\nconst parse = src => {\r\n  return path[posix].parse(src)\r\n}\r\n\r\nconst basename = src => {\r\n  return path[posix].basename(src);\r\n}\r\n\r\nconst dirname = src => {\r\n  return path[posix].dirname(src);\r\n}\r\n\r\nexport default {\r\n  parse: parse,\r\n  basename: basename,\r\n  dirname: dirname\r\n}\r\n","'use strict';\nconst {writeFile, mkdir} = require('fs');\nconst vinylRead = require('vinyl-read');\nconst path = require('path');\nconst logger = require('backed-logger');\nimport platformPath from './platform-path.js';\n\nclass Fs {\n  /**\n   * @param {object} sources [{src: [\"some/glob/exp\"], dest: \"some/dest\"}]\n   */\n  copySources(sources=[]) {\n    return new Promise((resolve, reject) => {\n      if (sources) {\n        try {\n          let promises = [];\n          for (let source of sources) {\n            promises.push(this.copy(source.src, source.dest));\n          }\n          Promise.all(promises).then(() => {\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  }\n\n  /**\n   * returns a destination using [vinyl](https://github.com/gulpjs/vinyl) info\n   */\n  destinationFromFile(file) {\n    let dest = platformPath.parse(file.path).dir;\n    dest = dest.replace(`${process.cwd()}\\\\`, '');\n    dest = dest.split(path.sep);\n    if (dest.length < 0) {\n      dest[0] = file.dest;\n    } else {\n      dest.push(file.dest);\n    }\n    dest.push(platformPath.basename(file.path));\n    dest = dest.toString().replace(/,/g, '/');\n    return dest;\n  }\n\n  /**\n   * @param {string} src \"some/src/path\"\n   * @param {string} dest \"some/dest/path\"\n   */\n  copy(src=null, dest=null) {\n    return new Promise(resolve => {\n      let promises = [];\n      vinylRead(src, {\n        cwd: process.cwd()\n      }).then(files => {\n        for (let file of files) {\n          file.dest = dest;\n          promises.push(this.write(file, this.destinationFromFile(file)));\n        }\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  /**\n   * @param {object} file {src: \"some/src/path\", dest: \"some/dest/path\"}\n   */\n  write(file, destination) {\n    return new Promise((resolve, reject) => {\n      if (file) {\n        writeFile(destination, file.contents, err => {\n          if (err) {\n            if (global.debug) {\n              logger.warn(\n                  `subdirectory(s)::not existing\n                  Backed will now try to create ${destination}`\n                );\n            }\n            const dest = platformPath.dirname(destination);\n            const paths = dest.split('/');\n            let prepath = '';\n            for (let path of paths) {\n              prepath += `${path}/`;\n              if (path.length > 2) {\n                mkdir(prepath, err => {\n                  if (err) {\n                    if (err.code !== 'EEXIST') {\n                      reject(err);\n                    }\n                  }\n                });\n              }\n            }\n            this.write(file, destination).then(() => {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\nexport default new Fs();\n"],"names":["onPlatform","platform","posix","parse","path","src","basename","dirname","require","writeFile","mkdir","vinylRead","logger","Fs","sources","Promise","resolve","reject","promises","source","push","copy","dest","all","then","error","file","platformPath","dir","replace","process","cwd","split","sep","length","toString","files","write","destinationFromFile","destination","contents","err","global","debug","warn","paths","prepath","code"],"mappings":"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"}