{"version":3,"file":"fs-node.js","sources":["../src/fs.js"],"sourcesContent":["'use strict';\nconst {writeFile, mkdir} = require('fs');\nconst vinylRead = require('vinyl-read');\nconst path = require('path');\nconst logger = require('backed-logger');\n\nclass Fs {\n  /**\n   * @param {object} sources [{src: [\"some/glob/exp\"], dest: \"some/dest\"}]\n   */\n  copySources(sources=[]) {\n    return new Promise((resolve, reject) => {\n      if (sources) {\n        try {\n          let promises = [];\n          for (let source of sources) {\n            promises.push(this.copy(source.src, source.dest));\n          }\n          Promise.all(promises).then(() => {\n            logger.succes(`${global.config.name}::copy finished`);\n            resolve();\n          });\n        } catch (error) {\n          logger.error(error);\n          reject(error);\n        }\n      }\n    });\n  }\n\n  /**\n   * returns a destination using [vinyl](https://github.com/gulpjs/vinyl) info\n   */\n  destinationFromFile(file) {\n    let dest = path.win32.parse(file.path).dir;\n    dest = dest.replace(`${process.cwd()}\\\\`, '');\n    dest = dest.split(path.sep);\n    if (dest.length > 1) {\n      dest[0] = file.dest;\n    } else {\n      dest[0] = file.dest;\n    }\n    dest.push(path.win32.basename(file.path));\n    dest = dest.toString().replace(/,/g, '\\\\');\n    return dest;\n  }\n\n  /**\n   * @param {string} src \"some/src/path\"\n   * @param {string} dest \"some/dest/path\"\n   */\n  copy(src=null, dest=null) {\n    return new Promise(resolve => {\n      let promises = [];\n      vinylRead(src, {\n        cwd: process.cwd()\n      }).then(files => {\n        for (let file of files) {\n          file.dest = path.win32.normalize(dest);\n          promises.push(this.write(file, this.destinationFromFile(file)));\n        }\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    });\n  }\n\n  /**\n   * @param {object} file {src: \"some/src/path\", dest: \"some/dest/path\"}\n   */\n  write(file, destination) {\n    return new Promise((resolve, reject) => {\n      if (file) {\n        writeFile(destination, file.contents, err => {\n          if (err) {\n            if (global.debug) {\n              logger.warn(\n                  `subdirectory(s)::not existing\n                  Backed will now try to create ${destination}`\n                );\n            }\n            const dest = path.win32.dirname(destination);\n            const paths = dest.split('\\\\');\n            let prepath = '';\n            for (let path of paths) {\n              prepath += `${path}\\\\`;\n              mkdir(process.cwd() + '\\\\' + prepath, err => {\n                if (err) {\n                  if (err.code !== 'EEXIST') {\n                    reject(err);\n                  }\n                }\n              });\n            }\n            this.write(file).then(() => {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\nexport default new Fs();\n"],"names":["require","writeFile","mkdir","vinylRead","path","logger","Fs","sources","Promise","resolve","reject","promises","source","push","copy","src","dest","all","then","succes","global","config","name","error","file","win32","parse","dir","replace","process","cwd","split","sep","length","basename","toString","files","normalize","write","destinationFromFile","destination","contents","err","debug","warn","dirname","paths","prepath","code"],"mappings":"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"}